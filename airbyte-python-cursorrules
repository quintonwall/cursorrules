# Cursor Rules Configuration File for Airbyte API Integration
# Language: Python
# Naming Convention: PEP8
# Credentials Management: .env file
# Library: airbyte-api
# Authentication: Bearer token with client and secret keys
# Results Mapping: pandas DataFrame

rules:
  - name: "Import Required Libraries"
    action: "Always ensure the required libraries are imported at the top of the file."
    details:
      - "os: To load environment variables."
      - "dotenv: To load .env file for credentials."
      - "pandas: For mapping API results to DataFrame."
      - "airbyte_api_client: For interacting with Airbyte APIs."
      - "airbyte_api_client.api: Import API-specific modules."
      - "airbyte_api_client.configuration: To configure the API client."
      - "requests: For token management and refreshing the token."

  - name: "Follow PEP8 Naming Conventions"
    action: "Ensure that variable, function, and class names adhere to PEP8 standards."
    details:
      - "Use snake_case for variable and function names."
      - "Use PascalCase for class names."
      - "Limit line length to 79 characters."

  - name: "Store Sensitive Information Securely"
    action: "All API keys, tokens, client IDs, and client secrets must be stored in a .env file."
    details:
      - ".env file example:"
        content: |
          AIRBYTE_API_URL=https://your-airbyte-instance.com
          AIRBYTE_CLIENT_ID=your_client_id
          AIRBYTE_CLIENT_SECRET=your_client_secret
      - "Load credentials using the python-dotenv library."
      - "Example code:"
        content: |
          from dotenv import load_dotenv
          import os
          load_dotenv()
          AIRBYTE_API_URL = os.getenv('AIRBYTE_API_URL')
          AIRBYTE_CLIENT_ID = os.getenv('AIRBYTE_CLIENT_ID')
          AIRBYTE_CLIENT_SECRET = os.getenv('AIRBYTE_CLIENT_SECRET')

  - name: "Authenticate Using Bearer Token"
    action: "Use client and secret keys to fetch a new bearer token before making API requests."
    details:
      - "Add token refresh logic in a reusable function."
      - "Example function to get a fresh token:"
        content: |
          import requests

          def get_access_token():
              """
              Fetch a new access token using client ID and secret.

              Returns:
                  str: Bearer token.
              """
              url = f"{AIRBYTE_API_URL}/oauth/token"
              payload = {
                  "client_id": AIRBYTE_CLIENT_ID,
                  "client_secret": AIRBYTE_CLIENT_SECRET,
                  "grant_type": "client_credentials"
              }
              response = requests.post(url, json=payload)
              response.raise_for_status()
              return response.json()["access_token"]

  - name: "Configure airbyte-api Client"
    action: "Always initialize and configure the Airbyte API client with the refreshed token."
    details:
      - "Example setup:"
        content: |
          from airbyte_api_client import Configuration, ApiClient

          def get_api_client():
              """
              Create and configure the Airbyte API client with a fresh token.

              Returns:
                  ApiClient: Configured Airbyte API client.
              """
              access_token = get_access_token()
              configuration = Configuration(
                  host=AIRBYTE_API_URL,
                  api_key={'Authorization': f"Bearer {access_token}"}
              )
              return ApiClient(configuration)

  - name: "Map Results to pandas DataFrame"
    action: "Always convert API response data to pandas DataFrame for further processing."
    details:
      - "Example function to convert API response to DataFrame:"
        content: |
          import pandas as pd

          def map_to_dataframe(data, columns=None):
              """
              Convert API response data to pandas DataFrame.

              Args:
                  data (list or dict): JSON response data.
                  columns (list, optional): List of column names to include.

              Returns:
                  pd.DataFrame: Data in tabular format.
              """
              df = pd.DataFrame(data)
              if columns:
                  df = df[columns]
              return df

  - name: "Use airbyte-api Methods for API Requests"
    action: "Encapsulate airbyte-api calls within reusable Python functions."
    details:
      - "Example function to get workspaces:"
        content: |
          from airbyte_api_client.api.workspaces_api import WorkspacesApi

          def get_workspaces(api_client):
              """
              Fetch all workspaces from the Airbyte API.

              Args:
                  api_client (ApiClient): Configured Airbyte API client.

              Returns:
                  pd.DataFrame: Workspace data as a DataFrame.
              """
              workspaces_api = WorkspacesApi(api_client)
              response = workspaces_api.list_workspaces()
              data = response['workspaces']
              return map_to_dataframe(data, columns=["workspaceId", "name"])

  - name: "Error Handling for API Requests"
    action: "Implement robust error handling for API calls."
    details:
      - "Use try-except blocks to handle common exceptions."
      - "Raise errors for debugging when necessary."
      - "Example:"
        content: |
          try:
              api_client = get_api_client()
              df = get_workspaces(api_client)
              print(df.head())
          except Exception as e:
              print(f"An error occurred: {e}")

  - name: "Use Environment-Specific Configuration"
    action: "Add support for different environments (development, staging, production)."
    details:
      - "Set environment-specific variables in the .env file:"
        content: |
          ENV=development
      - "Load and use the environment in your script:"
        content: |
          ENV = os.getenv('ENV', 'development')
          if ENV == 'production':
              AIRBYTE_API_URL = os.getenv('PROD_AIRBYTE_API_URL')
          else:
              AIRBYTE_API_URL = os.getenv('DEV_AIRBYTE_API_URL')

  - name: "Write Modular and Testable Code"
    action: "Break the code into smaller, testable functions and modules."
    details:
      - "Write unit tests for key functions."
      - "Use a testing framework like pytest."
      - "Example test case for workspace retrieval:"
        content: |
          def test_get_workspaces(mocked_response):
              mocked_response.return_value.workspaces = [
                  {"workspaceId": "123", "name": "Test Workspace"}
              ]
              api_client = get_api_client()
              df = get_workspaces(api_client)
              assert "workspaceId" in df.columns
              assert "name" in df.columns

  - name: "Document Functions and Modules"
    action: "Provide clear docstrings for all functions and modules."
    details:
      - "Example:"
        content: |
          def get_access_token():
              """
              Fetch a new access token using client ID and secret.

              Returns:
                  str: Bearer token.
              """
              ...
